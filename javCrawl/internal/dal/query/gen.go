// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
)

var (
	Q              = new(Query)
	Actor          *actor
	Author         *author
	EhentaiGallery *ehentaiGallery
	EleActorRe     *eleActorRe
	EleAuthorRe    *eleAuthorRe
	EleFile        *eleFile
	EleOrgRe       *eleOrgRe
	EleTagRe       *eleTagRe
	Element        *element
	Jav            *jav
	Organization   *organization
	PrUser         *prUser
	TagInfo        *tagInfo
)

func SetDefault(db *gorm.DB) {
	*Q = *Use(db)
	Actor = &Q.Actor
	Author = &Q.Author
	EhentaiGallery = &Q.EhentaiGallery
	EleActorRe = &Q.EleActorRe
	EleAuthorRe = &Q.EleAuthorRe
	EleFile = &Q.EleFile
	EleOrgRe = &Q.EleOrgRe
	EleTagRe = &Q.EleTagRe
	Element = &Q.Element
	Jav = &Q.Jav
	Organization = &Q.Organization
	PrUser = &Q.PrUser
	TagInfo = &Q.TagInfo
}

func Use(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Actor:          newActor(db),
		Author:         newAuthor(db),
		EhentaiGallery: newEhentaiGallery(db),
		EleActorRe:     newEleActorRe(db),
		EleAuthorRe:    newEleAuthorRe(db),
		EleFile:        newEleFile(db),
		EleOrgRe:       newEleOrgRe(db),
		EleTagRe:       newEleTagRe(db),
		Element:        newElement(db),
		Jav:            newJav(db),
		Organization:   newOrganization(db),
		PrUser:         newPrUser(db),
		TagInfo:        newTagInfo(db),
	}
}

type Query struct {
	db *gorm.DB

	Actor          actor
	Author         author
	EhentaiGallery ehentaiGallery
	EleActorRe     eleActorRe
	EleAuthorRe    eleAuthorRe
	EleFile        eleFile
	EleOrgRe       eleOrgRe
	EleTagRe       eleTagRe
	Element        element
	Jav            jav
	Organization   organization
	PrUser         prUser
	TagInfo        tagInfo
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Actor:          q.Actor.clone(db),
		Author:         q.Author.clone(db),
		EhentaiGallery: q.EhentaiGallery.clone(db),
		EleActorRe:     q.EleActorRe.clone(db),
		EleAuthorRe:    q.EleAuthorRe.clone(db),
		EleFile:        q.EleFile.clone(db),
		EleOrgRe:       q.EleOrgRe.clone(db),
		EleTagRe:       q.EleTagRe.clone(db),
		Element:        q.Element.clone(db),
		Jav:            q.Jav.clone(db),
		Organization:   q.Organization.clone(db),
		PrUser:         q.PrUser.clone(db),
		TagInfo:        q.TagInfo.clone(db),
	}
}

type queryCtx struct {
	Actor          *actorDo
	Author         *authorDo
	EhentaiGallery *ehentaiGalleryDo
	EleActorRe     *eleActorReDo
	EleAuthorRe    *eleAuthorReDo
	EleFile        *eleFileDo
	EleOrgRe       *eleOrgReDo
	EleTagRe       *eleTagReDo
	Element        *elementDo
	Jav            *javDo
	Organization   *organizationDo
	PrUser         *prUserDo
	TagInfo        *tagInfoDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Actor:          q.Actor.WithContext(ctx),
		Author:         q.Author.WithContext(ctx),
		EhentaiGallery: q.EhentaiGallery.WithContext(ctx),
		EleActorRe:     q.EleActorRe.WithContext(ctx),
		EleAuthorRe:    q.EleAuthorRe.WithContext(ctx),
		EleFile:        q.EleFile.WithContext(ctx),
		EleOrgRe:       q.EleOrgRe.WithContext(ctx),
		EleTagRe:       q.EleTagRe.WithContext(ctx),
		Element:        q.Element.WithContext(ctx),
		Jav:            q.Jav.WithContext(ctx),
		Organization:   q.Organization.WithContext(ctx),
		PrUser:         q.PrUser.WithContext(ctx),
		TagInfo:        q.TagInfo.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
