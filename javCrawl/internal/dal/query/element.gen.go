// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"javCrawl/internal/dal/dao"
)

func newElement(db *gorm.DB) element {
	_element := element{}

	_element.elementDo.UseDB(db)
	_element.elementDo.UseModel(&dao.Element{})

	tableName := _element.elementDo.TableName()
	_element.ALL = field.NewAsterisk(tableName)
	_element.ID = field.NewInt64(tableName, "ID")
	_element.TYPE = field.NewString(tableName, "TYPE")
	_element.SHAREDFLAG = field.NewInt32(tableName, "SHARED_FLAG")
	_element.UPLOADER = field.NewString(tableName, "UPLOADER")
	_element.CreatedAt = field.NewTime(tableName, "CREATED_TIME")
	_element.UpdatedAt = field.NewTime(tableName, "UPDATED_TIME")
	_element.EleFile = elementHasManyEleFile{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("EleFile", "dao.EleFile"),
	}

	_element.Actor = elementManyToManyActor{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Actor", "dao.Actor"),
	}

	_element.Author = elementHasManyAuthor{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Author", "dao.Author"),
	}

	_element.Organization = elementHasManyOrganization{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Organization", "dao.Organization"),
	}

	_element.TagInfo = elementHasManyTagInfo{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("TagInfo", "dao.TagInfo"),
	}

	_element.fillFieldMap()

	return _element
}

type element struct {
	elementDo

	ALL        field.Asterisk
	ID         field.Int64
	TYPE       field.String
	SHAREDFLAG field.Int32  // (0-否;1-是)
	UPLOADER   field.String // 上传用户
	CreatedAt  field.Time
	UpdatedAt  field.Time
	EleFile    elementHasManyEleFile

	Actor elementManyToManyActor

	Author elementHasManyAuthor

	Organization elementHasManyOrganization

	TagInfo elementHasManyTagInfo

	fieldMap map[string]field.Expr
}

func (e element) Table(newTableName string) *element {
	e.elementDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e element) As(alias string) *element {
	e.elementDo.DO = *(e.elementDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *element) updateTableName(table string) *element {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "ID")
	e.TYPE = field.NewString(table, "TYPE")
	e.SHAREDFLAG = field.NewInt32(table, "SHARED_FLAG")
	e.UPLOADER = field.NewString(table, "UPLOADER")
	e.CreatedAt = field.NewTime(table, "CREATED_TIME")
	e.UpdatedAt = field.NewTime(table, "UPDATED_TIME")

	e.fillFieldMap()

	return e
}

func (e *element) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *element) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 11)
	e.fieldMap["ID"] = e.ID
	e.fieldMap["TYPE"] = e.TYPE
	e.fieldMap["SHARED_FLAG"] = e.SHAREDFLAG
	e.fieldMap["UPLOADER"] = e.UPLOADER
	e.fieldMap["CREATED_TIME"] = e.CreatedAt
	e.fieldMap["UPDATED_TIME"] = e.UpdatedAt

}

func (e element) clone(db *gorm.DB) element {
	e.elementDo.ReplaceDB(db)
	return e
}

type elementHasManyEleFile struct {
	db *gorm.DB

	field.RelationField
}

func (a elementHasManyEleFile) Where(conds ...field.Expr) *elementHasManyEleFile {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a elementHasManyEleFile) WithContext(ctx context.Context) *elementHasManyEleFile {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a elementHasManyEleFile) Model(m *dao.Element) *elementHasManyEleFileTx {
	return &elementHasManyEleFileTx{a.db.Model(m).Association(a.Name())}
}

type elementHasManyEleFileTx struct{ tx *gorm.Association }

func (a elementHasManyEleFileTx) Find() (result []*dao.EleFile, err error) {
	return result, a.tx.Find(&result)
}

func (a elementHasManyEleFileTx) Append(values ...*dao.EleFile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a elementHasManyEleFileTx) Replace(values ...*dao.EleFile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a elementHasManyEleFileTx) Delete(values ...*dao.EleFile) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a elementHasManyEleFileTx) Clear() error {
	return a.tx.Clear()
}

func (a elementHasManyEleFileTx) Count() int64 {
	return a.tx.Count()
}

type elementManyToManyActor struct {
	db *gorm.DB

	field.RelationField
}

func (a elementManyToManyActor) Where(conds ...field.Expr) *elementManyToManyActor {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a elementManyToManyActor) WithContext(ctx context.Context) *elementManyToManyActor {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a elementManyToManyActor) Model(m *dao.Element) *elementManyToManyActorTx {
	return &elementManyToManyActorTx{a.db.Model(m).Association(a.Name())}
}

type elementManyToManyActorTx struct{ tx *gorm.Association }

func (a elementManyToManyActorTx) Find() (result []*dao.Actor, err error) {
	return result, a.tx.Find(&result)
}

func (a elementManyToManyActorTx) Append(values ...*dao.Actor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a elementManyToManyActorTx) Replace(values ...*dao.Actor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a elementManyToManyActorTx) Delete(values ...*dao.Actor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a elementManyToManyActorTx) Clear() error {
	return a.tx.Clear()
}

func (a elementManyToManyActorTx) Count() int64 {
	return a.tx.Count()
}

type elementHasManyAuthor struct {
	db *gorm.DB

	field.RelationField
}

func (a elementHasManyAuthor) Where(conds ...field.Expr) *elementHasManyAuthor {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a elementHasManyAuthor) WithContext(ctx context.Context) *elementHasManyAuthor {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a elementHasManyAuthor) Model(m *dao.Element) *elementHasManyAuthorTx {
	return &elementHasManyAuthorTx{a.db.Model(m).Association(a.Name())}
}

type elementHasManyAuthorTx struct{ tx *gorm.Association }

func (a elementHasManyAuthorTx) Find() (result []*dao.Author, err error) {
	return result, a.tx.Find(&result)
}

func (a elementHasManyAuthorTx) Append(values ...*dao.Author) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a elementHasManyAuthorTx) Replace(values ...*dao.Author) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a elementHasManyAuthorTx) Delete(values ...*dao.Author) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a elementHasManyAuthorTx) Clear() error {
	return a.tx.Clear()
}

func (a elementHasManyAuthorTx) Count() int64 {
	return a.tx.Count()
}

type elementHasManyOrganization struct {
	db *gorm.DB

	field.RelationField
}

func (a elementHasManyOrganization) Where(conds ...field.Expr) *elementHasManyOrganization {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a elementHasManyOrganization) WithContext(ctx context.Context) *elementHasManyOrganization {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a elementHasManyOrganization) Model(m *dao.Element) *elementHasManyOrganizationTx {
	return &elementHasManyOrganizationTx{a.db.Model(m).Association(a.Name())}
}

type elementHasManyOrganizationTx struct{ tx *gorm.Association }

func (a elementHasManyOrganizationTx) Find() (result []*dao.Organization, err error) {
	return result, a.tx.Find(&result)
}

func (a elementHasManyOrganizationTx) Append(values ...*dao.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a elementHasManyOrganizationTx) Replace(values ...*dao.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a elementHasManyOrganizationTx) Delete(values ...*dao.Organization) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a elementHasManyOrganizationTx) Clear() error {
	return a.tx.Clear()
}

func (a elementHasManyOrganizationTx) Count() int64 {
	return a.tx.Count()
}

type elementHasManyTagInfo struct {
	db *gorm.DB

	field.RelationField
}

func (a elementHasManyTagInfo) Where(conds ...field.Expr) *elementHasManyTagInfo {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a elementHasManyTagInfo) WithContext(ctx context.Context) *elementHasManyTagInfo {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a elementHasManyTagInfo) Model(m *dao.Element) *elementHasManyTagInfoTx {
	return &elementHasManyTagInfoTx{a.db.Model(m).Association(a.Name())}
}

type elementHasManyTagInfoTx struct{ tx *gorm.Association }

func (a elementHasManyTagInfoTx) Find() (result []*dao.TagInfo, err error) {
	return result, a.tx.Find(&result)
}

func (a elementHasManyTagInfoTx) Append(values ...*dao.TagInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a elementHasManyTagInfoTx) Replace(values ...*dao.TagInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a elementHasManyTagInfoTx) Delete(values ...*dao.TagInfo) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a elementHasManyTagInfoTx) Clear() error {
	return a.tx.Clear()
}

func (a elementHasManyTagInfoTx) Count() int64 {
	return a.tx.Count()
}

type elementDo struct{ gen.DO }

func (e elementDo) Debug() *elementDo {
	return e.withDO(e.DO.Debug())
}

func (e elementDo) WithContext(ctx context.Context) *elementDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e elementDo) ReadDB() *elementDo {
	return e.Clauses(dbresolver.Read)
}

func (e elementDo) WriteDB() *elementDo {
	return e.Clauses(dbresolver.Write)
}

func (e elementDo) Clauses(conds ...clause.Expression) *elementDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e elementDo) Returning(value interface{}, columns ...string) *elementDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e elementDo) Not(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e elementDo) Or(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e elementDo) Select(conds ...field.Expr) *elementDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e elementDo) Where(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e elementDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *elementDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e elementDo) Order(conds ...field.Expr) *elementDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e elementDo) Distinct(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e elementDo) Omit(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e elementDo) Join(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e elementDo) LeftJoin(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e elementDo) RightJoin(table schema.Tabler, on ...field.Expr) *elementDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e elementDo) Group(cols ...field.Expr) *elementDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e elementDo) Having(conds ...gen.Condition) *elementDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e elementDo) Limit(limit int) *elementDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e elementDo) Offset(offset int) *elementDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e elementDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *elementDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e elementDo) Unscoped() *elementDo {
	return e.withDO(e.DO.Unscoped())
}

func (e elementDo) Create(values ...*dao.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e elementDo) CreateInBatches(values []*dao.Element, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e elementDo) Save(values ...*dao.Element) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e elementDo) First() (*dao.Element, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Element), nil
	}
}

func (e elementDo) Take() (*dao.Element, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Element), nil
	}
}

func (e elementDo) Last() (*dao.Element, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Element), nil
	}
}

func (e elementDo) Find() ([]*dao.Element, error) {
	result, err := e.DO.Find()
	return result.([]*dao.Element), err
}

func (e elementDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.Element, err error) {
	buf := make([]*dao.Element, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e elementDo) FindInBatches(result *[]*dao.Element, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e elementDo) Attrs(attrs ...field.AssignExpr) *elementDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e elementDo) Assign(attrs ...field.AssignExpr) *elementDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e elementDo) Joins(fields ...field.RelationField) *elementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e elementDo) Preload(fields ...field.RelationField) *elementDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e elementDo) FirstOrInit() (*dao.Element, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Element), nil
	}
}

func (e elementDo) FirstOrCreate() (*dao.Element, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Element), nil
	}
}

func (e elementDo) FindByPage(offset int, limit int) (result []*dao.Element, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e elementDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e elementDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e elementDo) Delete(models ...*dao.Element) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *elementDo) withDO(do gen.Dao) *elementDo {
	e.DO = *do.(*gen.DO)
	return e
}
