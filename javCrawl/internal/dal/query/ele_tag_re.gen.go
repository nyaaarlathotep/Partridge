// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"javCrawl/internal/dal/dao"
)

func newEleTagRe(db *gorm.DB) eleTagRe {
	_eleTagRe := eleTagRe{}

	_eleTagRe.eleTagReDo.UseDB(db)
	_eleTagRe.eleTagReDo.UseModel(&dao.EleTagRe{})

	tableName := _eleTagRe.eleTagReDo.TableName()
	_eleTagRe.ALL = field.NewAsterisk(tableName)
	_eleTagRe.ID = field.NewInt32(tableName, "ID")
	_eleTagRe.ELEID = field.NewInt64(tableName, "ELE_ID")
	_eleTagRe.TAGID = field.NewInt32(tableName, "TAG_ID")
	_eleTagRe.CreatedAt = field.NewTime(tableName, "CREATED_TIME")
	_eleTagRe.UpdatedAt = field.NewTime(tableName, "UPDATED_TIME")

	_eleTagRe.fillFieldMap()

	return _eleTagRe
}

type eleTagRe struct {
	eleTagReDo

	ALL       field.Asterisk
	ID        field.Int32
	ELEID     field.Int64
	TAGID     field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (e eleTagRe) Table(newTableName string) *eleTagRe {
	e.eleTagReDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e eleTagRe) As(alias string) *eleTagRe {
	e.eleTagReDo.DO = *(e.eleTagReDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *eleTagRe) updateTableName(table string) *eleTagRe {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt32(table, "ID")
	e.ELEID = field.NewInt64(table, "ELE_ID")
	e.TAGID = field.NewInt32(table, "TAG_ID")
	e.CreatedAt = field.NewTime(table, "CREATED_TIME")
	e.UpdatedAt = field.NewTime(table, "UPDATED_TIME")

	e.fillFieldMap()

	return e
}

func (e *eleTagRe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *eleTagRe) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 5)
	e.fieldMap["ID"] = e.ID
	e.fieldMap["ELE_ID"] = e.ELEID
	e.fieldMap["TAG_ID"] = e.TAGID
	e.fieldMap["CREATED_TIME"] = e.CreatedAt
	e.fieldMap["UPDATED_TIME"] = e.UpdatedAt
}

func (e eleTagRe) clone(db *gorm.DB) eleTagRe {
	e.eleTagReDo.ReplaceDB(db)
	return e
}

type eleTagReDo struct{ gen.DO }

func (e eleTagReDo) Debug() *eleTagReDo {
	return e.withDO(e.DO.Debug())
}

func (e eleTagReDo) WithContext(ctx context.Context) *eleTagReDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e eleTagReDo) ReadDB() *eleTagReDo {
	return e.Clauses(dbresolver.Read)
}

func (e eleTagReDo) WriteDB() *eleTagReDo {
	return e.Clauses(dbresolver.Write)
}

func (e eleTagReDo) Clauses(conds ...clause.Expression) *eleTagReDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e eleTagReDo) Returning(value interface{}, columns ...string) *eleTagReDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e eleTagReDo) Not(conds ...gen.Condition) *eleTagReDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e eleTagReDo) Or(conds ...gen.Condition) *eleTagReDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e eleTagReDo) Select(conds ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e eleTagReDo) Where(conds ...gen.Condition) *eleTagReDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e eleTagReDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *eleTagReDo {
	return e.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (e eleTagReDo) Order(conds ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e eleTagReDo) Distinct(cols ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e eleTagReDo) Omit(cols ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e eleTagReDo) Join(table schema.Tabler, on ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e eleTagReDo) LeftJoin(table schema.Tabler, on ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e eleTagReDo) RightJoin(table schema.Tabler, on ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e eleTagReDo) Group(cols ...field.Expr) *eleTagReDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e eleTagReDo) Having(conds ...gen.Condition) *eleTagReDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e eleTagReDo) Limit(limit int) *eleTagReDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e eleTagReDo) Offset(offset int) *eleTagReDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e eleTagReDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *eleTagReDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e eleTagReDo) Unscoped() *eleTagReDo {
	return e.withDO(e.DO.Unscoped())
}

func (e eleTagReDo) Create(values ...*dao.EleTagRe) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e eleTagReDo) CreateInBatches(values []*dao.EleTagRe, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e eleTagReDo) Save(values ...*dao.EleTagRe) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e eleTagReDo) First() (*dao.EleTagRe, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EleTagRe), nil
	}
}

func (e eleTagReDo) Take() (*dao.EleTagRe, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EleTagRe), nil
	}
}

func (e eleTagReDo) Last() (*dao.EleTagRe, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EleTagRe), nil
	}
}

func (e eleTagReDo) Find() ([]*dao.EleTagRe, error) {
	result, err := e.DO.Find()
	return result.([]*dao.EleTagRe), err
}

func (e eleTagReDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.EleTagRe, err error) {
	buf := make([]*dao.EleTagRe, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e eleTagReDo) FindInBatches(result *[]*dao.EleTagRe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e eleTagReDo) Attrs(attrs ...field.AssignExpr) *eleTagReDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e eleTagReDo) Assign(attrs ...field.AssignExpr) *eleTagReDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e eleTagReDo) Joins(fields ...field.RelationField) *eleTagReDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e eleTagReDo) Preload(fields ...field.RelationField) *eleTagReDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e eleTagReDo) FirstOrInit() (*dao.EleTagRe, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EleTagRe), nil
	}
}

func (e eleTagReDo) FirstOrCreate() (*dao.EleTagRe, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.EleTagRe), nil
	}
}

func (e eleTagReDo) FindByPage(offset int, limit int) (result []*dao.EleTagRe, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e eleTagReDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e eleTagReDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e eleTagReDo) Delete(models ...*dao.EleTagRe) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *eleTagReDo) withDO(do gen.Dao) *eleTagReDo {
	e.DO = *do.(*gen.DO)
	return e
}
