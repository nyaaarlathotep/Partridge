// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"javCrawl/internal/dal/dao"
)

func newJav(db *gorm.DB) jav {
	_jav := jav{}

	_jav.javDo.UseDB(db)
	_jav.javDo.UseModel(&dao.Jav{})

	tableName := _jav.javDo.TableName()
	_jav.ALL = field.NewAsterisk(tableName)
	_jav.ELEID = field.NewInt64(tableName, "ELE_ID")
	_jav.CODE = field.NewString(tableName, "CODE")
	_jav.TITLE = field.NewString(tableName, "TITLE")
	_jav.PUBLISHDATE = field.NewTime(tableName, "PUBLISH_DATE")
	_jav.LENGTH = field.NewInt32(tableName, "LENGTH")
	_jav.DIRECTOR = field.NewString(tableName, "DIRECTOR")
	_jav.SERIES = field.NewString(tableName, "SERIES")
	_jav.CreatedAt = field.NewTime(tableName, "CREATED_TIME")
	_jav.UpdatedAt = field.NewTime(tableName, "UPDATED_TIME")

	_jav.fillFieldMap()

	return _jav
}

type jav struct {
	javDo

	ALL         field.Asterisk
	ELEID       field.Int64
	CODE        field.String // 識別碼
	TITLE       field.String
	PUBLISHDATE field.Time  // 發行日期
	LENGTH      field.Int32 // 長度
	DIRECTOR    field.String
	SERIES      field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (j jav) Table(newTableName string) *jav {
	j.javDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jav) As(alias string) *jav {
	j.javDo.DO = *(j.javDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jav) updateTableName(table string) *jav {
	j.ALL = field.NewAsterisk(table)
	j.ELEID = field.NewInt64(table, "ELE_ID")
	j.CODE = field.NewString(table, "CODE")
	j.TITLE = field.NewString(table, "TITLE")
	j.PUBLISHDATE = field.NewTime(table, "PUBLISH_DATE")
	j.LENGTH = field.NewInt32(table, "LENGTH")
	j.DIRECTOR = field.NewString(table, "DIRECTOR")
	j.SERIES = field.NewString(table, "SERIES")
	j.CreatedAt = field.NewTime(table, "CREATED_TIME")
	j.UpdatedAt = field.NewTime(table, "UPDATED_TIME")

	j.fillFieldMap()

	return j
}

func (j *jav) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jav) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 9)
	j.fieldMap["ELE_ID"] = j.ELEID
	j.fieldMap["CODE"] = j.CODE
	j.fieldMap["TITLE"] = j.TITLE
	j.fieldMap["PUBLISH_DATE"] = j.PUBLISHDATE
	j.fieldMap["LENGTH"] = j.LENGTH
	j.fieldMap["DIRECTOR"] = j.DIRECTOR
	j.fieldMap["SERIES"] = j.SERIES
	j.fieldMap["CREATED_TIME"] = j.CreatedAt
	j.fieldMap["UPDATED_TIME"] = j.UpdatedAt
}

func (j jav) clone(db *gorm.DB) jav {
	j.javDo.ReplaceDB(db)
	return j
}

type javDo struct{ gen.DO }

func (j javDo) Debug() *javDo {
	return j.withDO(j.DO.Debug())
}

func (j javDo) WithContext(ctx context.Context) *javDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j javDo) ReadDB() *javDo {
	return j.Clauses(dbresolver.Read)
}

func (j javDo) WriteDB() *javDo {
	return j.Clauses(dbresolver.Write)
}

func (j javDo) Clauses(conds ...clause.Expression) *javDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j javDo) Returning(value interface{}, columns ...string) *javDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j javDo) Not(conds ...gen.Condition) *javDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j javDo) Or(conds ...gen.Condition) *javDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j javDo) Select(conds ...field.Expr) *javDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j javDo) Where(conds ...gen.Condition) *javDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j javDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *javDo {
	return j.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (j javDo) Order(conds ...field.Expr) *javDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j javDo) Distinct(cols ...field.Expr) *javDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j javDo) Omit(cols ...field.Expr) *javDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j javDo) Join(table schema.Tabler, on ...field.Expr) *javDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j javDo) LeftJoin(table schema.Tabler, on ...field.Expr) *javDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j javDo) RightJoin(table schema.Tabler, on ...field.Expr) *javDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j javDo) Group(cols ...field.Expr) *javDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j javDo) Having(conds ...gen.Condition) *javDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j javDo) Limit(limit int) *javDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j javDo) Offset(offset int) *javDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j javDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *javDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j javDo) Unscoped() *javDo {
	return j.withDO(j.DO.Unscoped())
}

func (j javDo) Create(values ...*dao.Jav) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j javDo) CreateInBatches(values []*dao.Jav, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j javDo) Save(values ...*dao.Jav) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j javDo) First() (*dao.Jav, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Jav), nil
	}
}

func (j javDo) Take() (*dao.Jav, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Jav), nil
	}
}

func (j javDo) Last() (*dao.Jav, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Jav), nil
	}
}

func (j javDo) Find() ([]*dao.Jav, error) {
	result, err := j.DO.Find()
	return result.([]*dao.Jav), err
}

func (j javDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.Jav, err error) {
	buf := make([]*dao.Jav, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j javDo) FindInBatches(result *[]*dao.Jav, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j javDo) Attrs(attrs ...field.AssignExpr) *javDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j javDo) Assign(attrs ...field.AssignExpr) *javDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j javDo) Joins(fields ...field.RelationField) *javDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j javDo) Preload(fields ...field.RelationField) *javDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j javDo) FirstOrInit() (*dao.Jav, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Jav), nil
	}
}

func (j javDo) FirstOrCreate() (*dao.Jav, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.Jav), nil
	}
}

func (j javDo) FindByPage(offset int, limit int) (result []*dao.Jav, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j javDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j javDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j javDo) Delete(models ...*dao.Jav) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *javDo) withDO(do gen.Dao) *javDo {
	j.DO = *do.(*gen.DO)
	return j
}
