// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"javCrawl/internal/dal/dao"
)

func newTagInfo(db *gorm.DB) tagInfo {
	_tagInfo := tagInfo{}

	_tagInfo.tagInfoDo.UseDB(db)
	_tagInfo.tagInfoDo.UseModel(&dao.TagInfo{})

	tableName := _tagInfo.tagInfoDo.TableName()
	_tagInfo.ALL = field.NewAsterisk(tableName)
	_tagInfo.ID = field.NewInt32(tableName, "ID")
	_tagInfo.NAME = field.NewString(tableName, "NAME")
	_tagInfo.GROUPNAME = field.NewString(tableName, "GROUP_NAME")
	_tagInfo.SOURCE = field.NewString(tableName, "SOURCE")
	_tagInfo.CreatedAt = field.NewTime(tableName, "CREATED_TIME")
	_tagInfo.UpdatedAt = field.NewTime(tableName, "UPDATED_TIME")

	_tagInfo.fillFieldMap()

	return _tagInfo
}

type tagInfo struct {
	tagInfoDo

	ALL       field.Asterisk
	ID        field.Int32
	NAME      field.String
	GROUPNAME field.String
	SOURCE    field.String
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (t tagInfo) Table(newTableName string) *tagInfo {
	t.tagInfoDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagInfo) As(alias string) *tagInfo {
	t.tagInfoDo.DO = *(t.tagInfoDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagInfo) updateTableName(table string) *tagInfo {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "ID")
	t.NAME = field.NewString(table, "NAME")
	t.GROUPNAME = field.NewString(table, "GROUP_NAME")
	t.SOURCE = field.NewString(table, "SOURCE")
	t.CreatedAt = field.NewTime(table, "CREATED_TIME")
	t.UpdatedAt = field.NewTime(table, "UPDATED_TIME")

	t.fillFieldMap()

	return t
}

func (t *tagInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagInfo) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 6)
	t.fieldMap["ID"] = t.ID
	t.fieldMap["NAME"] = t.NAME
	t.fieldMap["GROUP_NAME"] = t.GROUPNAME
	t.fieldMap["SOURCE"] = t.SOURCE
	t.fieldMap["CREATED_TIME"] = t.CreatedAt
	t.fieldMap["UPDATED_TIME"] = t.UpdatedAt
}

func (t tagInfo) clone(db *gorm.DB) tagInfo {
	t.tagInfoDo.ReplaceDB(db)
	return t
}

type tagInfoDo struct{ gen.DO }

func (t tagInfoDo) Debug() *tagInfoDo {
	return t.withDO(t.DO.Debug())
}

func (t tagInfoDo) WithContext(ctx context.Context) *tagInfoDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagInfoDo) ReadDB() *tagInfoDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagInfoDo) WriteDB() *tagInfoDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagInfoDo) Clauses(conds ...clause.Expression) *tagInfoDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagInfoDo) Returning(value interface{}, columns ...string) *tagInfoDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagInfoDo) Not(conds ...gen.Condition) *tagInfoDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagInfoDo) Or(conds ...gen.Condition) *tagInfoDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagInfoDo) Select(conds ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagInfoDo) Where(conds ...gen.Condition) *tagInfoDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagInfoDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *tagInfoDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t tagInfoDo) Order(conds ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagInfoDo) Distinct(cols ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagInfoDo) Omit(cols ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagInfoDo) Join(table schema.Tabler, on ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagInfoDo) Group(cols ...field.Expr) *tagInfoDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagInfoDo) Having(conds ...gen.Condition) *tagInfoDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagInfoDo) Limit(limit int) *tagInfoDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagInfoDo) Offset(offset int) *tagInfoDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tagInfoDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagInfoDo) Unscoped() *tagInfoDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagInfoDo) Create(values ...*dao.TagInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagInfoDo) CreateInBatches(values []*dao.TagInfo, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagInfoDo) Save(values ...*dao.TagInfo) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagInfoDo) First() (*dao.TagInfo, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.TagInfo), nil
	}
}

func (t tagInfoDo) Take() (*dao.TagInfo, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.TagInfo), nil
	}
}

func (t tagInfoDo) Last() (*dao.TagInfo, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.TagInfo), nil
	}
}

func (t tagInfoDo) Find() ([]*dao.TagInfo, error) {
	result, err := t.DO.Find()
	return result.([]*dao.TagInfo), err
}

func (t tagInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.TagInfo, err error) {
	buf := make([]*dao.TagInfo, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagInfoDo) FindInBatches(result *[]*dao.TagInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagInfoDo) Attrs(attrs ...field.AssignExpr) *tagInfoDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagInfoDo) Assign(attrs ...field.AssignExpr) *tagInfoDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagInfoDo) Joins(fields ...field.RelationField) *tagInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagInfoDo) Preload(fields ...field.RelationField) *tagInfoDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagInfoDo) FirstOrInit() (*dao.TagInfo, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.TagInfo), nil
	}
}

func (t tagInfoDo) FirstOrCreate() (*dao.TagInfo, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.TagInfo), nil
	}
}

func (t tagInfoDo) FindByPage(offset int, limit int) (result []*dao.TagInfo, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagInfoDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagInfoDo) Delete(models ...*dao.TagInfo) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagInfoDo) withDO(do gen.Dao) *tagInfoDo {
	t.DO = *do.(*gen.DO)
	return t
}
