// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"pelican/internal/dal/dao"
)

func newPrUser(db *gorm.DB) prUser {
	_prUser := prUser{}

	_prUser.prUserDo.UseDB(db)
	_prUser.prUserDo.UseModel(&dao.PrUser{})

	tableName := _prUser.prUserDo.TableName()
	_prUser.ALL = field.NewAsterisk(tableName)
	_prUser.ID = field.NewInt32(tableName, "ID")
	_prUser.EMAIL = field.NewString(tableName, "EMAIL")
	_prUser.USERNAME = field.NewString(tableName, "USER_NAME")
	_prUser.PASSWORD = field.NewString(tableName, "PASSWORD")
	_prUser.VALIDATED = field.NewInt32(tableName, "VALIDATED")
	_prUser.LASTLOGINTIME = field.NewTime(tableName, "LAST_LOGIN_TIME")
	_prUser.SPACEQUOTA = field.NewInt64(tableName, "SPACE_QUOTA")
	_prUser.CreatedAt = field.NewTime(tableName, "CREATED_TIME")
	_prUser.UpdatedAt = field.NewTime(tableName, "UPDATED_TIME")
	_prUser.LASTLOGINIP = field.NewString(tableName, "LAST_LOGIN_IP")

	_prUser.fillFieldMap()

	return _prUser
}

type prUser struct {
	prUserDo

	ALL           field.Asterisk
	ID            field.Int32
	EMAIL         field.String
	USERNAME      field.String
	PASSWORD      field.String
	VALIDATED     field.Int32 // (0-否;1-是) 是否为有效账户
	LASTLOGINTIME field.Time  // 上次登陆时间
	SPACEQUOTA    field.Int64 // 用户空间配额
	CreatedAt     field.Time
	UpdatedAt     field.Time
	LASTLOGINIP   field.String // 上次登陆ip

	fieldMap map[string]field.Expr
}

func (p prUser) Table(newTableName string) *prUser {
	p.prUserDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p prUser) As(alias string) *prUser {
	p.prUserDo.DO = *(p.prUserDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *prUser) updateTableName(table string) *prUser {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "ID")
	p.EMAIL = field.NewString(table, "EMAIL")
	p.USERNAME = field.NewString(table, "USER_NAME")
	p.PASSWORD = field.NewString(table, "PASSWORD")
	p.VALIDATED = field.NewInt32(table, "VALIDATED")
	p.LASTLOGINTIME = field.NewTime(table, "LAST_LOGIN_TIME")
	p.SPACEQUOTA = field.NewInt64(table, "SPACE_QUOTA")
	p.CreatedAt = field.NewTime(table, "CREATED_TIME")
	p.UpdatedAt = field.NewTime(table, "UPDATED_TIME")
	p.LASTLOGINIP = field.NewString(table, "LAST_LOGIN_IP")

	p.fillFieldMap()

	return p
}

func (p *prUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *prUser) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 10)
	p.fieldMap["ID"] = p.ID
	p.fieldMap["EMAIL"] = p.EMAIL
	p.fieldMap["USER_NAME"] = p.USERNAME
	p.fieldMap["PASSWORD"] = p.PASSWORD
	p.fieldMap["VALIDATED"] = p.VALIDATED
	p.fieldMap["LAST_LOGIN_TIME"] = p.LASTLOGINTIME
	p.fieldMap["SPACE_QUOTA"] = p.SPACEQUOTA
	p.fieldMap["CREATED_TIME"] = p.CreatedAt
	p.fieldMap["UPDATED_TIME"] = p.UpdatedAt
	p.fieldMap["LAST_LOGIN_IP"] = p.LASTLOGINIP
}

func (p prUser) clone(db *gorm.DB) prUser {
	p.prUserDo.ReplaceDB(db)
	return p
}

type prUserDo struct{ gen.DO }

func (p prUserDo) Debug() *prUserDo {
	return p.withDO(p.DO.Debug())
}

func (p prUserDo) WithContext(ctx context.Context) *prUserDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p prUserDo) ReadDB() *prUserDo {
	return p.Clauses(dbresolver.Read)
}

func (p prUserDo) WriteDB() *prUserDo {
	return p.Clauses(dbresolver.Write)
}

func (p prUserDo) Clauses(conds ...clause.Expression) *prUserDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p prUserDo) Returning(value interface{}, columns ...string) *prUserDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p prUserDo) Not(conds ...gen.Condition) *prUserDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p prUserDo) Or(conds ...gen.Condition) *prUserDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p prUserDo) Select(conds ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p prUserDo) Where(conds ...gen.Condition) *prUserDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p prUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *prUserDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p prUserDo) Order(conds ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p prUserDo) Distinct(cols ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p prUserDo) Omit(cols ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p prUserDo) Join(table schema.Tabler, on ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p prUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) *prUserDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p prUserDo) RightJoin(table schema.Tabler, on ...field.Expr) *prUserDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p prUserDo) Group(cols ...field.Expr) *prUserDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p prUserDo) Having(conds ...gen.Condition) *prUserDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p prUserDo) Limit(limit int) *prUserDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p prUserDo) Offset(offset int) *prUserDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p prUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *prUserDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p prUserDo) Unscoped() *prUserDo {
	return p.withDO(p.DO.Unscoped())
}

func (p prUserDo) Create(values ...*dao.PrUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p prUserDo) CreateInBatches(values []*dao.PrUser, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p prUserDo) Save(values ...*dao.PrUser) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p prUserDo) First() (*dao.PrUser, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PrUser), nil
	}
}

func (p prUserDo) Take() (*dao.PrUser, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PrUser), nil
	}
}

func (p prUserDo) Last() (*dao.PrUser, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PrUser), nil
	}
}

func (p prUserDo) Find() ([]*dao.PrUser, error) {
	result, err := p.DO.Find()
	return result.([]*dao.PrUser), err
}

func (p prUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dao.PrUser, err error) {
	buf := make([]*dao.PrUser, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p prUserDo) FindInBatches(result *[]*dao.PrUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p prUserDo) Attrs(attrs ...field.AssignExpr) *prUserDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p prUserDo) Assign(attrs ...field.AssignExpr) *prUserDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p prUserDo) Joins(fields ...field.RelationField) *prUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p prUserDo) Preload(fields ...field.RelationField) *prUserDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p prUserDo) FirstOrInit() (*dao.PrUser, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PrUser), nil
	}
}

func (p prUserDo) FirstOrCreate() (*dao.PrUser, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dao.PrUser), nil
	}
}

func (p prUserDo) FindByPage(offset int, limit int) (result []*dao.PrUser, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p prUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p prUserDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p prUserDo) Delete(models ...*dao.PrUser) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *prUserDo) withDO(do gen.Dao) *prUserDo {
	p.DO = *do.(*gen.DO)
	return p
}
